using System;
using System.Collections.Generic;

class RGB
{
    public byte R;
    public byte G;
    public byte B;

    public RGB()
    {

    }

    public RGB(byte r, byte g, byte b)
    {
        this.R = r;
        this.G = g;
        this.B = b;
    }

    public float Distance(RGB point) => ((this.R - point.R) ^ 2 + (this.B - point.B) ^ 2 + (this.G - point.G));
}

class RandomRGB : RGB
{
    public List<RGB> Cluster;

    public RandomRGB()
    {
        Random rnd = new Random();
        this.R = (byte)rnd.Next(255);
        this.G = (byte)rnd.Next(255);
        this.B = (byte)rnd.Next(255);

        this.Cluster = new List<RGB>();
    }
}

byte[] kmeans((Bitmap bmp, float[] img) t)
{
    int N = t.bmp.Width * t.bmp.Height;
    byte[] byteList = discret(t.img);

    RandomRGB[] pallet = new RandomRGB[255];
    for (int i = 0; i < 255; i++)
        pallet[i] = new RandomRGB();


    for (int i = 0; i < byteList.Length; i += 3)
    {
        var actualRGB = new RGB(byteList[i], byteList[i + 1], byteList[i + 2]);
        pallet
            .MinBy(point =>
                actualRGB.Distance(point) < actualRGB.Distance(point))
                .Cluster.Add(actualRGB);
    }

    for (int i = 0; i < pallet.Length; i++)
    {
        var r = 0;
        var g = 0;
        var b = 0;

        var clusterSize = pallet[i].Cluster.Count();

        for(int j = 0; j < clusterSize; j++)
        {
            r += pallet[i].Cluster[j].R;
            g += pallet[i].Cluster[j].G;
            b += pallet[i].Cluster[j].B;
        }

        pallet[i].R = (byte) (r / clusterSize); 
        pallet[i].G = (byte) (g / clusterSize); 
        pallet[i].B = (byte) (b / clusterSize); 
    }

}
